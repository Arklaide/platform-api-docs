openapi: 3.0.1

info:
  title: Debbie Platform API Docs
  description: The Debbie APIs is a RESTful interface, allowing you to programmatically
    update, add and access your data on the platform. It provides predictable URLs
    for accessing resources, and uses built-in HTTP features to receive commands and
    return responses. This makes it easy to communicate with third party systems.
  contact:
    email: support@debbie.dk
  version: v0.1.0
  x-logo:
    url: https://debbie-platform.github.io/platform-api-docs/deb-logo.svg

externalDocs:
  description: Find out more about Debbie
  url: https://debbie.dk

servers:
  - url: https://api.debbiecollect.com/api

tags:
  - name: Cases
    description: Endpoints for interating with cases
  - name: "Voucher Type Ids"
    description: |
      ### Hovedstol:
      | Type | id |
      | --- | --- |
      | Faktura          | eb41e58e-fccf-419d-a771-cd5027fe6e87 |
      | Kreditnota       | ef2cdc50-230f-4046-b1af-0f9c498dddd3 |
      | Opgørelse        | 42385ae0-6846-425c-a793-8d47a3b190b5 |
      | Acontofaktura    | 2d101b6e-74f9-4a4d-9f8e-c7abe2264da0 |
      | Gældsbrev        | bf61f462-6d3c-42e8-a99a-852d4a664926 |

      ### Omkostninger:
      | Type | id |
      | --- | --- |
      | Inkassoomkostning        | 07960de4-303d-4793-92da-3a8cfd5da1a1 |
      | Inkassogebyr             | 4c3ccbbf-0651-45b2-b37b-4fe736acfd7e |
      | Rykkergebyr              | 3e51bf87-3c8f-4dd5-abd5-69417d113c89 |
      | Kompensationsgebyr       | ed3e3d61-e1bc-4ee2-9166-adf2c41a2bbf |

      ### Renter:
      | Type | id |
      | --- | --- |
      | Procesrente               | ca4af363-9925-436c-83d6-23b3db6ed5d2 |
      | Fastrente                 | 299dc393-1b71-4950-860f-8fb485036722 |
      | Årlig rente               | 37db68dd-80be-40c7-8d2d-3619c793107f |

      ### Transaktioner:
      | Type | id |
      | --- | --- |
      | Indbetaling               | c51f2f6a-8081-45ef-b52d-5e0569fdf12e |
      | Udbetaling                | 11a8c26e-fe31-4092-adf5-431dc96e8a27 |"



paths:
  /v1/{tenantId}/cases:
    post:
      tags:
      - Cases
      summary: Create new case
      description: Create new case allows the api consumer to create new cases
      operationId: create-case
      parameters:
        - in: path
          name: tenantId
          schema:
            type: string
            format: uuid
          required: true
          description: Id of the tenant the case is being created for
      requestBody:
        description: New case object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewCase'
            example:
              referenceId: Your id
              creditorId: debbie creditor uuid
              isCompany: false
              debtors:
              - isCompany: false
                name: Jane Doe
                cpr: '1234567890'
                email: jane@example.com
                phone: '88888888'
                address:
                  address: Byvej 2A, 1. tv 0012, Tune
                  coAddress:
                  city: Roskilde
                  zipcode: '4000'
                  country: Danmark
              vouchers:
              - referenceId: Fakt. 123456
                voucherTypeId: eb41e58e-fccf-419d-a771-cd5027fe6e87
                amount: -259900
                imposedByCreditor: true
                date: '2020-05-01 00:00:00.000+01'
                dueDate: '2020-05-08 00:00:00.000+01'
                referenceVouchers:
                - interestStartDate: '2020-06-01 00:00:00.000+01'
                  amount: 0
                  imposedByCreditor: false
                  voucherTypeId: ca4af363-9925-436c-83d6-23b3db6ed5d2
                  date: '2020-06-01 00:00:00.000+01'
                - voucherTypeId: 3e51bf87-3c8f-4dd5-abd5-69417d113c89
                  amount: -10000
                  imposedByCreditor: true
                  date: '2020-05-28 00:00:00.000+01'
                - voucherTypeId: 3e51bf87-3c8f-4dd5-abd5-69417d113c89
                  amount: -10000
                  imposedByCreditor: true
                  date: '2020-06-07 00:00:00.000+01'

        required: true
      responses:
        200:
          description: Successful operation
          content: {}
        401:
          $ref: "#/components/responses/UnauthorizedError"
        422:
          description: Invalid input data
          content: {}
      x-codegen-request-body-name: body

components:
  schemas:

    Address:
      type: object
      properties:
        address:
          type: string
          description: The street name and number of the address
        coAddress:
          type: string
        zipcode:
          type: string
        city:
          type: string
        country:
          type: string
      required:
        - address
        - zipcode
        - city

    NewVoucherFile:
      type: object
      properties:
        fileName:
          type: string
        contentType:
          type: string
        fileId:
          type: string
          format: uuid
      required:
        - fileName
        - contentType
        - fileId

    NewVoucher:
      type: object
      properties:
        voucherTypeId:
          type: string
          format: uuid
          description: An id for the voucher type. A list of ids can be found in the Voucher Type Ids chapter.
        amount:
          type: integer
        referenceId:
          type: string
        interest:
          type: string
        date:
          type: string
        interestStartDate:
          type: string
        interestEndDate:
          type: string
        dueDate:
          type: string
        appendix:
          $ref: '#/components/schemas/NewVoucherFile'
        imposedByCreditor:
          type: boolean
        tags:
          type: array
          items:
            type: string
        referenceVouchers:
          type: array
          items:
            $ref: '#/components/schemas/NewVoucher'
      required:
        - voucherTypeId
        - amount
        - date
        - imposedByCreditor
    NewCase:
      type: object
      properties:
        creditorId:
          type: string
          format: uuid
          description: Id of the creditor which the case belongs to
        referenceId:
          type: string
        chainId:
          type: string
          format: uuid
          description: Id of the chain the case is to go through
        caseImportId:
          type: string
          format: uuid
        isCompany:
          type: boolean
          description: Does the case concern a company
        debtors:
          type: array
          items:
            type: object
            properties:
              isCompany:
                type: boolean
              name:
                type: string
              cpr:
                type: string
                description: The cpr number of a debtor, only used when debtor is a person.
              cvr:
                type: string
                description: The cvr number of a debtor, only used when debtor is a company.
              email:
                type: string
              phone:
                type: string
              address:
                $ref: '#/components/schemas/Address'
                description: The debtors address
            required:
              - isCompany
              - name
        vouchers:
          type: array
          items:
            $ref: '#/components/schemas/NewVoucher'
      required:
        - creditorId
        - referenceId
        - isCompany
        - debtors
        - vouchers

  
  responses:
    UnauthorizedError:
      description: Access token missing or invalid

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      description: 'Authentication with an API key kan be done by using a bearer token
        in the Authorization header. This is done using the following format ''Authorization:
        Bearer {token}''.'

security:
  - bearerAuth: []